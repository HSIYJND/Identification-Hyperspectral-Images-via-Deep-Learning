from __future__ import print_function
from PIL import Image
import tensorflow as tf
import numpy as np
import time
import os

log_dir = '/tmp/log_with_summaries'
batch_size = 200
max_step = 1000
img_size = 128
save_step = 100
disp_step = 5
epoch = 5
step = 0

def get_image_paths(img_dir):
    filenames = os.listdir(img_dir)
    filenames = [os.path.join(img_dir, item) for item in filenames]
    return filenames

with tf.name_scope("pretreament"):
    pos_filenames = get_image_paths("./data/dip")
    neg_filenames = get_image_paths("./data/hap")
    print("num of dip samples is %d" % len(pos_filenames))
    print("num of hap samples is %d" % len(neg_filenames))

    TRAIN_SEC, TEST_SEC = 0.8, 0.2
    pos_sample_num, neg_sample_num = len(pos_filenames), len(neg_filenames)
    np.random.shuffle(np.arange(len(pos_filenames)))
    np.random.shuffle(np.arange(len(neg_filenames)))
    pos_train, pos_test = pos_filenames[: int(pos_sample_num * TRAIN_SEC)], pos_filenames[int(pos_sample_num * TRAIN_SEC) :]
    neg_train, neg_test = neg_filenames[: int(neg_sample_num * TRAIN_SEC)], neg_filenames[int(neg_sample_num * TRAIN_SEC) :]

    print("dip sample : train num is %d, test num is %d" % (len(pos_train), len(pos_test)))
    print("hap sample : train num is %d, test num is %d" % (len(neg_train), len(neg_test)))

    all_train, all_test = [], []
    all_train_label, all_test_label = [], []
    all_train.extend(pos_train)
    all_train.extend(neg_train)
    all_test.extend(pos_test)
    all_test.extend(neg_test)
    pos_train_label, pos_test_label = np.ones(len(pos_train), dtype=np.int64), np.ones(len(pos_test), dtype=np.int64)
    neg_train_label, neg_test_label = np.zeros(len(neg_train), dtype=np.int64), np.zeros(len(neg_test), dtype=np.int64)
    all_train_label = np.hstack((pos_train_label, neg_train_label))
    all_test_label = np.hstack((pos_test_label, neg_test_label))
    print("train num is %d, test num is %d" % (len(all_train), len(all_test)))
    print("train_label num is %d, test_label num is %d" % (len(all_train_label), len(all_test_label)))
    
with tf.name_scope("trans_files"):
    def resize_img(img_path, shape):
        im = Image.open(img_path)
        im = im.resize(shape)
        im = im.convert('RGB')
        return im

    def save_as_tfrecord(samples, labels, bin_path):
        assert len(samples) == len(labels)
        writer = tf.python_io.TFRecordWriter(bin_path)
        img_label = list(zip(samples, labels))
        np.random.shuffle(img_label)
        for img, label in img_label:
            im = resize_img(img, (24, 24))
            im_raw = im.tobytes()
            example = tf.train.Example(features=tf.train.Features(feature={
                "label": tf.train.Feature(int64_list=tf.train.Int64List(value=[label])),
                'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[im_raw]))
